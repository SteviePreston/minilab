---
- name: Deploy Basic Observability Platform (Prometheus + Grafana)
  hosts: master_nodes
  become: yes
  vars:
    kubeconfig_path: /etc/rancher/k3s/k3s.yaml
    timeout: 600
    observability_namespace: monitoring
    manifests_path: "{{ playbook_dir }}/../manifests"
    values_path: "{{ playbook_dir }}/../../../infrastructure"
    
  pre_tasks:
    - name: Verify ArgoCD is running
      shell: |
        kubectl get pods -n argocd --selector=app.kubernetes.io/name=argocd-server --field-selector=status.phase=Running --no-headers
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: argocd_status
      failed_when: argocd_status.stdout_lines | length == 0

    - name: Create monitoring namespace
      shell: |
        kubectl create namespace {{ observability_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Create temporary directory for helm values
      file:
        path: /tmp/observability-values
        state: directory
        mode: '0755'

  tasks:
    # ==================== Create Secrets ====================
    - name: Generate and create Grafana admin secret
      shell: |
        kubectl create secret generic grafana-admin-secret \
          --from-literal=admin-user=admin \
          --from-literal=admin-password=$(openssl rand -base64 20) \
          -n {{ observability_namespace }} \
          --dry-run=client -o yaml | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_secret
      changed_when: "'created' in grafana_secret.stdout or 'configured' in grafana_secret.stdout"

    # ==================== Copy Values Files ====================
    - name: Copy Prometheus values to remote
      copy:
        src: "{{ values_path }}/prometheus/values-production.yaml"
        dest: /tmp/observability-values/prometheus-values.yaml
        mode: '0644'

    - name: Copy Grafana values to remote
      copy:
        src: "{{ values_path }}/grafana/values-production.yaml"
        dest: /tmp/observability-values/grafana-values.yaml
        mode: '0644'

    # ==================== Add Helm Repositories ====================
    - name: Add Helm repositories
      shell: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: helm_repos
      changed_when: "'has been added' in helm_repos.stdout or 'Update Complete' in helm_repos.stdout"

    # ==================== Deploy Prometheus ====================
    - name: Deploy Prometheus using Helm with values file
      shell: |
        helm upgrade --install prometheus-production prometheus-community/kube-prometheus-stack \
          --namespace {{ observability_namespace }} \
          --values /tmp/observability-values/prometheus-values.yaml \
          --wait --timeout {{ timeout }}s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: prometheus_deploy
      changed_when: "'has been upgraded' in prometheus_deploy.stdout or 'has been installed' in prometheus_deploy.stdout"

    - name: Wait for Prometheus pods to be ready
      shell: |
        kubectl wait --namespace {{ observability_namespace }} \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/name=prometheus \
          --timeout={{ timeout }}s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: prometheus_ready
      retries: 3
      delay: 30

    # ==================== Deploy Grafana ====================
    - name: Deploy Grafana using Helm with values file
      shell: |
        helm upgrade --install grafana-production grafana/grafana \
          --namespace {{ observability_namespace }} \
          --values /tmp/observability-values/grafana-values.yaml \
          --wait --timeout {{ timeout }}s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_deploy
      changed_when: "'has been upgraded' in grafana_deploy.stdout or 'has been installed' in grafana_deploy.stdout"

    - name: Wait for Grafana pods to be ready
      shell: |
        kubectl wait --namespace {{ observability_namespace }} \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/name=grafana \
          --timeout={{ timeout }}s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_ready
      retries: 3
      delay: 30

    # ==================== Get Service Information ====================
    - name: Wait for Grafana LoadBalancer IP assignment
      shell: |
        timeout 300 bash -c '
          while true; do
            IP=$(kubectl get svc grafana-production -n {{ observability_namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null)
            if [[ -n "$IP" && "$IP" != "null" ]]; then
              echo "$IP"
              break
            fi
            echo "Waiting for LoadBalancer IP assignment..."
            sleep 10
          done'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_ip

    - name: Get Grafana admin credentials
      shell: |
        echo "Username: $(kubectl get secret grafana-admin-secret -n {{ observability_namespace }} -o jsonpath='{.data.admin-user}' | base64 --decode)"
        echo "Password: $(kubectl get secret grafana-admin-secret -n {{ observability_namespace }} -o jsonpath='{.data.admin-password}' | base64 --decode)"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_credentials
      no_log: false  # We want to see this in output

# ==================== Verification ====================
    - name: List all services in monitoring namespace
      shell: |
        kubectl get svc -n {{ observability_namespace }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: all_monitoring_services

    - name: List all pods in monitoring namespace
      shell: |
        kubectl get pods -n {{ observability_namespace }} -o wide
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: observability_pods

    - name: Find Prometheus service name
      shell: |
        kubectl get svc -n {{ observability_namespace }} --no-headers | grep prometheus | head -1 | awk '{print $1}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: prometheus_service_name
      ignore_errors: true

    - name: Find Grafana service name
      shell: |
        kubectl get svc -n {{ observability_namespace }} --no-headers | grep grafana | head -1 | awk '{print $1}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_service_name
      ignore_errors: true

    - name: Get Grafana LoadBalancer IP (if exists)
      shell: |
        kubectl get svc {{ grafana_service_name.stdout }} -n {{ observability_namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "No LoadBalancer IP assigned"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_ip
      when: grafana_service_name.stdout != ""

    - name: Get Grafana admin credentials
      shell: |
        if kubectl get secret grafana-admin-secret -n {{ observability_namespace }} >/dev/null 2>&1; then
          echo "Username: $(kubectl get secret grafana-admin-secret -n {{ observability_namespace }} -o jsonpath='{.data.admin-user}' | base64 --decode)"
          echo "Password: $(kubectl get secret grafana-admin-secret -n {{ observability_namespace }} -o jsonpath='{.data.admin-password}' | base64 --decode)"
        else
          echo "Grafana admin secret not found"
        fi
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: grafana_credentials

    # ==================== Display Results ====================
    - name: Display observability platform status
      debug:
        msg: |
          
          ================================================================================
          📊 Observability Platform Deployment Status
          ================================================================================
          
          🏃 All Monitoring Pods:
          {{ observability_pods.stdout }}
          
          🌐 All Monitoring Services:
          {{ all_monitoring_services.stdout }}
          
          🔍 Service Discovery:
          - Prometheus Service: {{ prometheus_service_name.stdout | default('Not found') }}
          - Grafana Service: {{ grafana_service_name.stdout | default('Not found') }}
          
          🎯 Access Information:
          {% if grafana_service_name.stdout != "" and grafana_ip.stdout != "No LoadBalancer IP assigned" %}
          - Grafana Web UI: http://{{ grafana_ip.stdout }}:3000
          {% elif grafana_service_name.stdout != "" %}
          - Grafana (NodePort/ClusterIP): kubectl port-forward svc/{{ grafana_service_name.stdout }} -n monitoring 3000:3000
          {% else %}
          - Grafana: Service not found - check deployment
          {% endif %}
          
          {% if prometheus_service_name.stdout != "" %}
          - Prometheus: kubectl port-forward svc/{{ prometheus_service_name.stdout }} -n monitoring 9090:9090
          {% else %}
          - Prometheus: Service not found - check deployment
          {% endif %}
          
          🔐 Grafana Credentials:
          {{ grafana_credentials.stdout }}
          
          📝 Troubleshooting Commands:
          # Check Helm releases:
          helm list -n {{ observability_namespace }}
          
          # Check pod logs:
          kubectl logs -l app.kubernetes.io/name=grafana -n {{ observability_namespace }}
          kubectl logs -l app.kubernetes.io/name=prometheus -n {{ observability_namespace }}
          
          # Manual port-forward examples:
          kubectl port-forward svc/$(kubectl get svc -n {{ observability_namespace }} | grep grafana | awk '{print $1}') -n {{ observability_namespace }} 3000:3000
          kubectl port-forward svc/$(kubectl get svc -n {{ observability_namespace }} | grep prometheus | awk '{print $1}') -n {{ observability_namespace }} 9090:9090
          
          ================================================================================

  post_tasks:
    - name: Save deployment summary
      shell: |
        cat > /tmp/observability-deployment-summary.json <<EOF
        {
          "deployment_timestamp": "$(date -Iseconds)",
          "namespace": "{{ observability_namespace }}",
          "grafana_ip": "{{ grafana_ip.stdout }}",
          "grafana_url": "http://{{ grafana_ip.stdout }}:3000",
          "components": {
            "prometheus": "deployed",
            "grafana": "deployed",
            "node_exporter": "deployed",
            "kube_state_metrics": "deployed"
          },
          "credentials_secret": "grafana-admin-secret",
          "notes": [
            "No persistent storage configured",
            "Grafana credentials in kubernetes secret",
            "Prometheus retention: 7 days"
          ]
        }
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Cleanup temporary values directory
      file:
        path: /tmp/observability-values
        state: absent
